{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 HelveticaNeue-Bold;
\f3\fnil\fcharset0 HelveticaNeue-Italic;\f4\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red29\green29\blue29;\red255\green255\blue255;\red29\green29\blue29;
\red0\green10\blue24;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c14902\c14902\c14902;\cssrgb\c100000\c100000\c100000;\cssrgb\c14902\c14902\c14902\c74902;
\cssrgb\c0\c3922\c12549\c3137;\cssrgb\c0\c0\c0\c85098;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
##In a town, there are 
\f1\fs24 \cf4 \cb5 n
\f0\fs28 \cf2 \cb3  people labeled from 
\f1\fs24 \cf4 \cb5 1
\f0\fs28 \cf2 \cb3  to 
\f1\fs24 \cf4 \cb5 n
\f0\fs28 \cf2 \cb3 . There is a rumor that one of these people is secretly the town judge.\cb1 \
\cb3 ##If the town judge exists, then:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 ##		\expnd0\expndtw0\kerning0
The town judge trusts nobody.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 ##		\expnd0\expndtw0\kerning0
Everybody (except for the town judge) trusts the town judge.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 ##		\expnd0\expndtw0\kerning0
There is exactly one person that satisfies properties 
\f2\b 1
\f0\b0  and 
\f2\b 2
\f0\b0 .\cb1 \
\pard\pardeftab720\sa320\partightenfactor0
\cf2 \cb3 ##You are given an array 
\f1\fs24 \cf4 \cb5 trust
\f0\fs28 \cf2 \cb3  where 
\f1\fs24 \cf4 \cb5 trust[i] = [a
\fs18 i
\fs24 , b
\fs18 i
\fs24 ]
\f0\fs28 \cf2 \cb3  representing that the person labeled 
\f1\fs24 \cf4 \cb5 a
\fs18 i
\f0\fs28 \cf2 \cb3  trusts the person labeled 
\f1\fs24 \cf4 \cb5 b
\fs18 i
\f0\fs28 \cf2 \cb3 .\cb1 \
\cb3 ##Return 
\f3\i the label of the town judge if the town judge exists and can be identified, or return 
\f1\i0\fs24 \cf4 \cb5 -1
\f3\i\fs28 \cf2 \cb3  otherwise
\f0\i0 .\cb1 \
\cb3 \'a0\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f2\b \cf2 \cb3 ##Example 1:
\f0\b0 \cb1 \

\f4\b \cb5 ##Input:
\f1\b0 \cf4  n = 2, trust = [[1,2]]\
##
\f4\b \cf2 Output:
\f1\b0 \cf4  2\

\f2\b \cf2 \cb3 ##Example 2:
\f0\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\f4\b \cf2 \cb5 ##Input:
\f1\b0 \cf4  n = 3, trust = [[1,3],[2,3]]\

\f4\b \cf2 ##Output:
\f1\b0 \cf4  3\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b \cf2 \cb3 ##Example 3:
\f0\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\f4\b \cf2 \cb5 ##Input:
\f1\b0 \cf4  n = 3, trust = [[1,3],[2,3],[3,1]]\

\f4\b \cf2 ##Output:
\f1\b0 \cf4  -1\
\
\pard\pardeftab720\partightenfactor0

\f0 \cf6 \cb1 class Solution:\
    def findJudge(self, n: int, trust: List[List[int]]) -> int:\
        # Initialize indeg and outdeg lists with size n+1 and set all elements to 0\
        indeg = [0] * (n+1)\
        outdeg = [0] * (n+1)\
        \
        # Iterate through the trust relationships and increment the indeg and outdeg of the corresponding people\
        for i, j in trust:\
            outdeg[i] += 1\
            indeg[j] += 1\
            \
        # Iterate through the indeg list\
        for i in range(1, n+1):\
            # Check if a person has n-1 incoming trusts and 0 outgoing trusts\
            if indeg[i] == n-1 and outdeg[i] == 0:\
                return i\
        \
        # If no such person found, return -1\
        return -1\
\
\
class Solution:\
    def findJudge(self, n: int, trust: List[List[int]]) -> int:\
        l=[[0,0] for x in range(n+1)]\
        for i in trust:\
            l[i[1]][1]+=1\
            l[i[0]][0]+=1\
        for i in range(1,len(l)):\
            if l[i][0]==0 and l[i][1]==n-1:\
                return i    \
        return -1        }