##You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.

##The graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. If there is no outgoing edge from i, then edges[i] == -1.

## You are also given two integers node1 and node2.

## Return the index of the node that can be reached from both node1 and node2, such that the maximum between the distance from node1 to that node, and from node2 to that node is minimized. If there are multiple answers, return the node with the smallest index, and if no possible answer exists, return -1.

## Note that edges may contain cycles.

## Example 1:


##Input: edges = [2,2,3,-1], node1 = 0, node2 = 1
##Output: 2
##Explanation: The distance from node 0 to node 2 is 1, and the distance from node 1 to node 2 is 1.
##The maximum of those two distances is 1. It can be proven that we cannot get a node with a smaller maximum distance than 1, so we return node 2.

##Example 2:
##Input: edges = [1,2,-1], node1 = 0, node2 = 2
##Output: 2
##Explanation: The distance from node 0 to node 2 is 2, and the distance from node 2 to itself is 0.
##The maximum of those two distances is 2. It can be proven that we cannot get a node with a smaller maximum distance than 2, so we return node 2.

class Solution:
    def dfs(self, node, dist, edges, dis):
        """
        Helper function to perform depth first search
        """
        # iterate until we reach the end of the edge or a node that has already been visited
        while node != -1 and dis[node] == -1:
            dis[node] = dist
            dist += 1 # update distance of current node
            node = edges[node] # move to next node

    def closestMeetingNode(self, edges, node1, node2):
        """
        Function that returns the closest meeting point between two nodes
        """
        res, min_dist, n = -1, float('inf'), len(edges)
        # create distance vectors for both nodes
        dist1, dist2 = [-1]*n, [-1]*n
        # perform DFS starting from node1 and node2
        self.dfs(node1, 0, edges, dist1)
        self.dfs(node2, 0, edges, dist2)

        # iterate through all nodes
        for i in range(n):
            # check if current node is the closest meeting point
            if min(dist1[i], dist2[i]) >= 0 and max(dist1[i], dist2[i]) < min_dist:
                min_dist = max(dist1[i], dist2[i])
                res = i
        return res

class Solution:
    def closestMeetingNode(self, edges: List[int], node1: int, node2: int) -> int:
        #These sets will keep track of its respective node; like browsing history ;)
        visited_1=set()
        visited_2=set()
        
        while node1!=-1 or node2!=-1:
            #record only if node is not cyclic or not at its destination
            if node1!=-1 and node1 not in visited_1:
                if node1 in visited_2:
                    if node2 in visited_1:
                        #if the code is here,there are 2 common values so return minimum
                        return min(node1,node2)
                    #if code is here then node2 NOT in visited_1 so just return node1
                    return node1
                #here we record our existing node value and move to the next node
                visited_1.add(node1)
                node1=edges[node1]
            

            if node2!=-1 and node2 not in visited_2:
                if node2 in visited_1:
                    #if the code is here,it means that node1 was not in visited2 (or it would have gone to ther other loop)
                    return node2
                visited_2.add(node2)
                node2=edges[node2]
            if (node1 in visited_1 or node1==-1) and (node2 in visited_2 or node2==-1):
                break
        #if code is here, both paths have terminated with no common node
        return -1
            
